#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <cstring>
#include <cstdlib>
#include <string>
#include <iomanip>
using namespace std;

static int iceman_Full_HP; //最大生命值：应由输入值决定
static int lion_Full_HP;
static int wolf_Full_HP;
static int ninja_Full_HP;
static int dragon_Full_HP;

class iceman { 
public:
	int HP, attack; //初始化生命值、攻击力
	bool exist = false; //exist表示是否被制造
	iceman(int l = iceman_Full_HP) {  //构造函数：初始化生命值l
		HP = l;
	}
};
class lion {
public:
	int HP, attack; //未初始化的生命值、攻击力
	bool exist = false; //exist表示是否被制造
	lion(int l = lion_Full_HP) {  //构造函数：初始化生命值l
		HP = l;
	}
};
class wolf {
public:
	int HP, attack; //未初始化的生命值、攻击力
	bool exist = false; //exist表示是否被制造
	wolf(int l = wolf_Full_HP) {  //构造函数：初始化生命值l
		HP = l;
	}
};
class ninja {
public:
	int HP, attack; //未初始化的生命值、攻击力
	bool exist = false; //exist表示是否被制造
	ninja(int l = ninja_Full_HP) {  //构造函数：初始化生命值l
		HP = l;
	}
};
class dragon {
public:
	int HP, attack; //未初始化的生命值、攻击力
	bool exist = false; //exist表示是否被制造
	dragon(int l = dragon_Full_HP) {  //构造函数：初始化生命值l
		HP = l;
	}
};
//司令部
class Headquarter {
public:
	int life = 0, Army_num = 0; // 生命元&兵种总数量，初始化0
	int iceman_num = 0, lion_num = 0, wolf_num = 0, ninja_num = 0, dragon_num = 0; //司令部内各兵种的个数，初始化0
	Headquarter(int n) {
		life = n; //构造函数：初始化生命元n
	}
};
//造兵，n=司令部剩余生命元，life=兵生命值种
bool Troops(int n,int life) {
	if (n >= life) return true;
	else return false;
}

int main()
{
	//第一步：生成兵种
	//输入初始化参数：测试次数，生命元，兵种生命值
	int Test_time, life; //测试次数&生命元
	cin >> Test_time;
	//按次数循环
	for (int i = 0; i < Test_time; i++) {
		cin >> life;
		int dragon_life, ninja_life, iceman_life, lion_life, wolf_life;
		cin >> dragon_life >> ninja_life >> iceman_life >> lion_life >> wolf_life; //初始化兵种生命值
		//把兵种的最大生命值static int赋为输入值
		dragon_Full_HP = dragon_life; ninja_Full_HP = ninja_life; iceman_Full_HP = iceman_life; lion_Full_HP = lion_life; wolf_Full_HP = wolf_life;
		int Time = -1; //世界时间
		Headquarter red(life), blue(life);
		cout << "Case:" << i + 1 << endl;
		int redflag = 1, blueflag = 1; //flag指示是否还在派兵，均为0表示不再派兵，循环结束
		//创建两兵营的各兵种数组，最大容量为10
		iceman red_iceman[10] = {}, blue_iceman[10] = {};
		lion red_lion[10] = {}, blue_lion[10] = {};
		wolf red_wolf[10] = {}, blue_wolf[10] = {};
		ninja red_ninja[10] = {}, blue_ninja[10] = {};
		dragon red_dragon[10] = {}, blue_dragon[10] = {};
		//主循环：造兵
		// 0=iceman,1=lion,2=wolf,3=ninja,4=dragon
		//红方司令部按照iceman、lion、wolf、ninja、dragon的顺序循环制造武士
		int red_sequence[5] = { 0,1,2,3,4 };
		//蓝方司令部按照lion、dragon、ninja、iceman、wolf的顺序循环制造武士
		int blue_sequence[5] = { 1,4,3,0,2 };
		int red_num = 0, blue_num = 0; //_num表示各司令部目前正在制造的兵种
		bool red_stop_Troops = false, blue_stop_Troops = false; //指示是否停止造兵，若为true则跳过造兵循环
		while (redflag != 0 || blueflag != 0) {
			Time++; redflag = 0; blueflag = 0;
			//造兵，sequence_num表示造兵失败的数量，sequence达到5表示无法造兵，退出循环
			int red_sequence_num = 0, blue_sequence_num = 0;
			while ((redflag == 0) && (red_stop_Troops == false)) {
				if (red_sequence_num == 5) {
					red_stop_Troops = true;
					cout << setw(3) << setfill('0') << Time << ' ';
					cout << "red headquarter stops making warriors" << endl;
					break;
				}
				switch (red_sequence[red_num % 5]) {
				case 0:
					if (Troops(red.life, iceman_Full_HP)) {
						red_sequence_num = 0; redflag++; red_num++;
						red_iceman[red.iceman_num].exist = true;
						red.iceman_num++;
						red.Army_num++;
						red.life -= iceman_Full_HP;
						cout << setw(3) << setfill('0') << Time << ' ';
						cout << "red iceman " << red.Army_num << " born with strength " << iceman_life << ',' << red.iceman_num << " iceman in red headquarter" << endl;
						break;
					}
					else {
						red_sequence_num++; red_num++; break;
					}
				case 1:
					if (Troops(red.life, lion_Full_HP)) {
						red_sequence_num = 0; redflag++; red_num++;
						red_lion[red.lion_num].exist = true;
						red.lion_num++;
						red.Army_num++;
						red.life -= lion_Full_HP;
						cout << setw(3) << setfill('0') << Time << ' ';
						cout << "red lion " << red.Army_num << " born with strength " << lion_life << ',' << red.lion_num << " lion in red headquarter" << endl;
						break;
					}
					else {
						red_sequence_num++; red_num++; break;
					}
				case 2:
					if (Troops(red.life, wolf_Full_HP)) {
						red_sequence_num = 0; redflag++; red_num++;
						red_wolf[red.wolf_num].exist = true;
						red.wolf_num++;
						red.Army_num++;
						red.life -= wolf_Full_HP;
						cout << setw(3) << setfill('0') << Time << ' ';
						cout << "red wolf " << red.Army_num << " born with strength " << wolf_life << ',' << red.wolf_num << " wolf in red headquarter" << endl;
						break;
					}
					else {
						red_sequence_num++; red_num++; break;
					}
				case 3:
					if (Troops(red.life, ninja_Full_HP)) {
						red_sequence_num = 0; redflag++; red_num++;
						red_ninja[red.ninja_num].exist = true;
						red.ninja_num++;
						red.Army_num++;
						red.life -= ninja_Full_HP;
						cout << setw(3) << setfill('0') << Time << ' ';
						cout << "red ninja " << red.Army_num << " born with strength " << ninja_life << ',' << red.ninja_num << " ninja in red headquarter" << endl;
						break;
					}
					else {
						red_sequence_num++; red_num++; break;
					}
				case 4:
					if (Troops(red.life, dragon_Full_HP)) {
						red_sequence_num = 0; redflag++; red_num++;
						red_dragon[red.dragon_num].exist = true;
						red.dragon_num++;
						red.Army_num++;
						red.life -= dragon_Full_HP;
						cout << setw(3) << setfill('0') << Time << ' ';
						cout << "red dragon " << red.Army_num << " born with strength " << dragon_life << ',' << red.dragon_num << " dragon in red headquarter" << endl;
						break;
					}
					else {
						red_sequence_num++; red_num++; break;
					}
				}
			}
			while ((blueflag == 0) && (blue_stop_Troops == false)) {
				if (blue_sequence_num == 5) {
					blue_stop_Troops = true;
					cout << setw(3) << setfill('0') << Time << ' ';
					cout << "blue headquarter stops making warriors" << endl;
					break;
				}
				switch (blue_sequence[blue_num % 5]) {
				case 0:
					if (Troops(blue.life, iceman_Full_HP)) {
						blue_sequence_num = 0; blueflag++; blue_num++;
						blue_iceman[blue.iceman_num].exist = true;
						blue.iceman_num++;
						blue.Army_num++;
						blue.life -= iceman_Full_HP;
						cout << setw(3) << setfill('0') << Time << ' ';
						cout << "blue iceman " << blue.Army_num << " born with strength " << iceman_life << ',' << blue.iceman_num << " iceman in blue headquarter" << endl;
						break;
					}
					else {
						blue_sequence_num++; blue_num++; break;
					}
				case 1:
					if (Troops(blue.life, lion_Full_HP)) {
						blue_sequence_num = 0; blueflag++; blue_num++;
						blue_lion[blue.lion_num].exist = true;
						blue.lion_num++;
						blue.Army_num++;
						blue.life -= lion_Full_HP;
						cout << setw(3) << setfill('0') << Time << ' ';
						cout << "blue lion " << blue.Army_num << " born with strength " << lion_life << ',' << blue.lion_num << " lion in blue headquarter" << endl;
						break;
					}
					else {
						blue_sequence_num++; blue_num++; break;
					}
				case 2:
					if (Troops(blue.life, wolf_Full_HP)) {
						blue_sequence_num = 0; blueflag++; blue_num++;
						blue_wolf[blue.wolf_num].exist = true;
						blue.wolf_num++;
						blue.Army_num++;
						blue.life -= wolf_Full_HP;
						cout << setw(3) << setfill('0') << Time << ' ';
						cout << "blue wolf " << blue.Army_num << " born with strength " << wolf_life << ',' << blue.wolf_num << " wolf in blue headquarter" << endl;
						break;
					}
					else {
						blue_sequence_num++; blue_num++; break;
					}
				case 3:
					if (Troops(blue.life, ninja_Full_HP)) {
						blue_sequence_num = 0; blueflag++; blue_num++;
						blue_ninja[blue.ninja_num].exist = true;
						blue.ninja_num++;
						blue.Army_num++;
						blue.life -= ninja_Full_HP;
						cout << setw(3) << setfill('0') << Time << ' ';
						cout << "blue ninja " << blue.Army_num << " born with strength " << ninja_life << ',' << blue.ninja_num << " ninja in blue headquarter" << endl;
						break;
					}
					else {
						blue_sequence_num++; blue_num++; break;
					}
				case 4:
					if (Troops(blue.life, dragon_Full_HP)) {
						blue_sequence_num = 0; blueflag++; blue_num++;
						blue_dragon[blue.dragon_num].exist = true;
						blue.dragon_num++;
						blue.Army_num++;
						blue.life -= dragon_Full_HP;
						cout << setw(3) << setfill('0') << Time << ' ';
						cout << "blue dragon " << blue.Army_num << " born with strength " << dragon_life << ',' << blue.dragon_num << " dragon in blue headquarter" << endl;
						break;
					}
					else {
						blue_sequence_num++; blue_num++; break;
					}
				}
			}
			}
	}
	return 0;
}
